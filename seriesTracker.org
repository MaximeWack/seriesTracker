#+title: seriesTracker
#+author: Maxime Wack
#+property: header-args :results silent

* Preamble

#+begin_src elisp
;;; package --- Summary
;; Package-Requires: ((dash "2.12.1"))
;;; Commentary:
;;; Code:
#+end_src

* Requirements

~url~ is needed to connect to the API and ~json~ to parse the response.
~dash~ is used to simplify writing.


#+begin_src elisp
(require 'url)
(require 'json)
(require 'dash)
#+end_src

* tvdb API

API layer to communicate with theTVdbAPI.
This is mainly a /GET/ API, with one /POST/ method for authentication.
The results are returned in JSON, almost everytime in the ~data~ element.
Large queries require pagination with information in the ~links~ element.
~/refresh_token~ returns the token in the ~token~ element.

** getJSON

TheTVdbAPI answers in JSON.
Parse the JSON in the url-buffer response with ~json-read-object~.

#+begin_src elisp
(defun tvdb--getJSON (url-buffer)
  "Parse the JSON in the URL-BUFFER returned by url."

  (with-current-buffer url-buffer
    (goto-char (point-max))
    (move-beginning-of-line 1)
    (json-read-object)))
#+end_src

** login

TheTVdbAPI requires login to access.
This is the only /POST/ call in the API and it provides the token needed for all other operations.
The login needs a ~username~, an ~apikey~, and a ~userkey~.
Parse the response using ~tvdb--getJSON~, and return the ~token~ element.

#+begin_src elisp
(defun tvdb--login (username apikey userkey)
  "Login using USERNAME, APIKEY and USERKEY.
Return the token"

  (->> (let ((url-request-method "POST")
            (url-request-extra-headers '(("Content-Type" . "application/json")
                                         ("Accept" . "application/json")))
            (url-request-data (concat "{\"apikey\": \"" apikey "\", \"userkey\": \"" userkey "\", \"username\": \"" username "\" }"))
            (url-show-status nil))
        (url-retrieve-synchronously "https://api.thetvdb.com/login" t))
      tvdb--getJSON
      (alist-get 'token)))
#+end_src

Save the token in a declared variable

#+begin_src elisp
(defvar tvdb--token
  nil
  "Auth token")
#+end_src

For example:

#+begin_src elisp
(setq tvdb--token (tvdb--login ""
                        ""
                        ""))
#+end_src

** Queries

elisp functions to call API endpoints.

Requirements:
- search series
- get episode list with airing times
- get updated series

*** Helpers

Helper functions to work with the queries and their results.

**** tvdb

All calls to theTVdbAPI are /GET/ calls using the token and parameters.
Call the API /GET/ endpoints with the Authorization ~token~ and the ~params~ as a string.
Return the whole JSON response.

#+begin_src elisp
(defun tvdb--tvdb-raw (token params)
  (tvdb--getJSON
   (let* ((url-request-method "GET")
          (bearer (concat "Bearer " token))
          (url-request-extra-headers `(("Accept" . "application/json")
                                       ("Authorization" . ,bearer)))
          (url-show-status nil))
     (url-retrieve-synchronously (concat "https://api.thetvdb.com" params)))))
#+end_src

~refresh_token~ is the only call that doesn't require parameters nor return its result in the ~data~ element.
Make the default call to ~tvdb~ when ~params~ is /nil/ to ~refresh_token~, return the ~data~ element otherwise.
~params~ is concatenated as a string.

#+begin_src elisp
(defun tvdb--tvdb (token &rest params)
  "Generic function to query tvdbapi.

Needs a TOKEN to work. The TOKEN can be obtained using the TVDB--LOGIN function.
If no PARAMS are given, call refresh_token, else concatenate all params and call the API.
Returns the data element of the parsed JSON response."

  (if params
      (alist-get 'data
                 (tvdb--tvdb-raw token (apply 'concat params)))
    (alist-get 'token
               (tvdb--tvdb-raw token "/refresh_token"))))
#+end_src

For example, refreshing the token:

#+begin_src elisp
(tvdb--tvdb tvdb--token)
#+end_src

**** alist-select

Each series and episode is represented as an alist.
Select a list of elements from an alist.

#+begin_src elisp
(defun tvdb--utils-alist-select (fields alist)
  "Keep only FIELDS in ALIST by constructing a new alist containing only these elements."

  (->> fields
       reverse
       (--reduce-from (acons it (alist-get it alist) acc)
                     nil)))
#+end_src

For example:

#+begin_src elisp
(tvdb--utils-alist-select
 '(a c)
 '((a . 1)
   (b . "b")
   (c . c)))
#+end_src

**** array-select

Series and episodes lists are represented as arrays of alists.
Select a list of elements from each alist in an array.

#+begin_src elisp
(defun tvdb--utils-array-select (fields array)
  "Keep only FIELDS in every alist in the ARRAY. "

  (--map (tvdb--utils-alist-select fields it) array))
#+end_src

For example:

#+begin_src elisp
(tvdb--utils-array-select '(a c)
              '(((a . 1) (b . "b") (c . c))
                ((a . 3) (b . "a") (c . d))))
#+end_src

**** array-pull

Same elements in each alist in a array consitute a column.
Extract a column from an array.

#+begin_src elisp
(defun tvdb--utils-array-pull (field array)
  "Keep only FIELD in every alist in the ARRAY and flatten."

  (--map (alist-get field it) array))
#+end_src

Example:

#+begin_src elisp
(tvdb--utils-array-pull 'a
            '(((a . 1) (b . 2)) ((a . 3) (b . 4))))
#+end_src

**** epoch/datestring

Get (current-time) as an epoch.

#+begin_src elisp
(defun tvdb--utils-current-epoch ()
    "Get (current-time) as an epoch."

    (string-to-number (format-time-string "%s" (current-time))))
#+end_src

Convert between epochs and datestrings.
fromTime in ~update~ and lastUpdated ou are epochs.
However, firstAired for series and episodes is a date, and needs to be compared to current-epoch

#+begin_src elisp
(defun tvdb--utils-date-to-epoch (date)
  "Convert DATE to an epoch."

  (->> (concat date " 00:00:00")
       date-to-time
       (format-time-string "%s")
       (string-to-number)))
#+end_src
Example:

#+begin_src elisp
(tvdb--utils-date-to-epoch "2020-01-01")
(tvdb--utils-current-epoch)
#+end_src

*** search

Search for a series by name.

Keep elements:
- id :: unique id
- seriesName :: series name
- firstAired :: date first aired
- status :: Ended | Continuing | Upcoming
- network :: network
- overview :: description

#+begin_src elisp
(defun tvdb--search (token seriesName)
  "Search for SERIESNAME.
Needs a TOKEN to work. The TOKEN can be obtained using the TVDB--LOGIN function."

  (->> seriesName
      (tvdb--tvdb token "/search/series?name=")
      (tvdb--utils-array-select '(id
                      seriesName
                      firstAired
                      status
                      network
                      overview))))
#+end_src

For example:

#+begin_src elisp
(setq series-list (tvdb--search tvdb--token "Game of Thrones"))
#+end_src

*** series

Get a series detailed information.

Keep elements:
- id :: unique id
- seriesName :: series name
- status :: Ended | Continuing | Upcoming
- lastUpdated :: date of last update, as an epoch

#+begin_src elisp
(defun tvdb--series (token id)
  "Get informations about a specific series ID.
Needs a TOKEN to work. The TOKEN can be obtained using the TVDB--LOGIN function."

  (->> id
      int-to-string
      (tvdb--tvdb token "/series/")
      (tvdb--utils-alist-select '(id
                      seriesName
                      status
                      lastUpdated))))
#+end_src

For example:

#+begin_src elisp
(setq serie (tvdb--series tvdb--token 121361))
#+end_src

*** series/episodes

Get all episodes of a series.

Keep elements:
- id :: episode id
- absoluteNumber :: total number
- airedSeason :: season number
- airedEpisodeNumber :: episode number
- episodeName :: name of the episode
- firstAired :: date of airing
- siteRating :: rating for this episode
- siteRatingCount :: votes for this episode


The episode list is paginated, so there are a few steps to retrieve the whole episode list.

**** Get one page of results for a series.

First let's get any page of results.

#+begin_src elisp
(defun tvdb--series/episodes1Page (token id page)
  "Get one page of results for episodes in a series.

Needs a TOKEN to work. The TOKEN can be obtained using the TVDB--LOGIN function.
PAGE is the queried page."

  (tvdb--tvdb-raw token (concat "/series/" (int-to-string id) "/episodes?page=" (int-to-string page))))
#+end_src

Let's also get the number of pages. This will help us retrieve only the needed results when updating later.

#+begin_src elisp
(defun tvdb--series/episodesLastPage (token id)
  "Get the number of pages of results for the episodes of series ID.

Needs a TOKEN to work. The TOKEN can be obtained using the TVDB--LOGIN function. "

  (->> (tvdb--series/episodes1Page token id 1)
       (alist-get 'links)
       (alist-get 'last)))
#+end_src

**** Recursively append the results in the ~next~ page.

#+begin_src elisp
(defun tvdb--series/episodesPage (token id page acc)
  "Get the whole episode list of show ID recursively.

Needs a TOKEN to work. The TOKEN can be obtained using the TVDB--LOGIN function.
PAGE is the current queried page and ACC the accumulator."

  (let* ((query (tvdb--series/episodes1Page token id page))
         (next (->> query
                    (alist-get 'links)
                    (alist-get 'next)))
         (data (->> query
                    (alist-get 'data)
                    (tvdb--utils-array-select '(id
                                    absoluteNumber
                                    airedSeason
                                    airedEpisodeNumber
                                    episodeName
                                    firstAired
                                    siteRating
                                    siteRatingCount)))))
    (if next
        (tvdb--series/episodesPage token id next (append acc data))
      (append acc data))))
#+end_src

**** Consolidate the list

The results contain special episodes and are unsorted.
Filter out episodes with ~airedSeason~ = 0, and sort according to ~absoluteNumber~.

#+begin_src elisp
(defun tvdb--series/episodes (token id &optional startPage)
  "Get all episodes for a specific series ID.
Needs a TOKEN to work. The TOKEN can be obtained using the TVDB--LOGIN function.
Optionally, begin at STARTPAGE instead of first page of results."

  (->> (tvdb--series/episodesPage token id (or startPage 1) nil)
       (--filter (> (alist-get 'airedSeason it) 0))
       (--sort (< (alist-get 'absoluteNumber it)
                  (alist-get 'absoluteNumber other)))))
#+end_src

For example, all episodes from Game of Thrones:

#+begin_src elisp
(setq episodes (tvdb--series/episodes tvdb--token 121361))
(tvdb--series/episodes tvdb--token 121361 2)
#+end_src

*** update

Get a list of updated series.
The API only returns data for a period of *one week* after ~fromTime~ (as an epoch).
~lastUpdated~ is given as an epoch.

Query one week of updates.

#+begin_src elisp
(defun tvdb--update-one-week (token fromTime)
  "Return an array of series that have changed in the week after FROMTIME.
Needs a TOKEN to work. The TOKEN can be obtained using the TVDB--LOGIN function."

  (->> fromTime
       (tvdb--tvdb token "/updated/query?fromTime=")))
#+end_src

Call ~tvdb--update-one-week~ for every week from ~fromTime~ to ~(current-time)~.
~fromTime~ needs to be given as an epoch.

#+begin_src elisp
(defun tvdb--update (token fromTime)
  "Return an array of series that have changed since FROMTIME.
Needs a TOKEN to work.  The TOKEN can be obtained using the TVDB--LOGIN function."
  (->> (number-sequence
        fromTime
        (tvdb--utils-current-epoch)
        (* 3600 24 7))
       (-map 'int-to-string)
       (--map (tvdb--update-one-week token it))
       (car)))
#+end_src

For example, the updates in the last hour:

#+begin_src elisp
(setq updates (tvdb--update tvdb--token (tvdb--utils-current-epoch)))
(tvdb--update tvdb--token (tvdb--utils-date-to-epoch "2020-05-01 00:00"))
#+end_src

* Internal API

API to manipulate the internal data representation.

Requirements:
- renew token
- search a series
- add series to list of followed series
- remove series from list of followed series
- show list of followed series
- show all episodes of a series in the list
- mark any watched episode for any followed series
- mark all episodes of a series as watched
- mark all episodes up to a given episodes as watched
- query updates for new episodes
- show a list of upcoming episodes
- show a list of available episodes to watch

** Data model

Keep track of followed series and watched episodes.
The model is a list of series alists with keys ~id~, ~seriesName~, ~status~, ~lastUpdated~, and ~lastPage~.
Each series alist also contains an ~episodes~ key with a list of episodes alists with keys ~id~, ~absoluteNumber~, ~airedSeason~, ~airedEpisodeNumber~, ~episodeName~, ~firstAired~, ~siteRating~, ~siteRatingCount~
Each episode alist also contains a ~watched~ key.

#+begin_src elisp
(defvar tvdb--data
  nil
  "Internal data containing followed series and episode.

Of the form :

'(((id . seriesId) (props . value) (…) (episodes ((id . episodeId) (watched . t) (props.value) (…))
                                                 ((id . episodeId) (watched . nil) (props.value) (…))))
  ((id . seriesId) (…) (episodes ((id . episodeId) (…))
                                 ((id . episodeId) (…)))))")
#+end_src

** Methods
*** renew token
:PROPERTIES:
:ID:       fa55a6fc-d66b-4c84-ae5f-1dc03fa802d3
:END:

Renew the token.
It should reconnect if token is invalid, and throw an error message if no valid credentials are given.
The token should be renewed prior to any query (or after a certain timeout?)

#+begin_src elisp
(defun tvdb-renew-token ()
  "Renew the token in tvdb--token."

  (setq tvdb--token (tvdb--tvdb tvdb--token)))
#+end_src

#+begin_src elisp
(tvdb-renew-token)
#+end_src

*** search a series

Search a series by name.

#+begin_src elisp
(defun tvdb-search (seriesName)
  "Search SERIESNAME."

  (tvdb--search tvdb--token seriesName))
#+end_src

For example:

#+begin_src elisp
(tvdb-search "utopia")
(tvdb-search "game of thrones")
(tvdb-search "rick and morty")
#+end_src

*** add series to list

Add a series to ~tvdb--data~, with its list of episodes.
Adding an already existing list resets the list (ie. all episodes are unwatched).

#+begin_src elisp
(defun tvdb-add (id)
  "Add series with ID to tvdb--data.
Adding an already existing series resets it."

  (setq tvdb--data
        (--> tvdb--data
            (--remove (= id (alist-get 'id it)) it)
            (-snoc it (--> (tvdb--series tvdb--token id)
                          (-snoc it `(lastPage . ,(tvdb--series/episodesLastPage tvdb--token id)))
                          (-snoc it `(episodes ,@(tvdb--series/episodes tvdb--token id))))))))
#+end_src

For example, add the previously searched series.

#+begin_src elisp
(tvdb-add 121361)
(tvdb-add 264991)
(tvdb-add 275274)
#+end_src

*** remove series from list

Remove a series from ~tvdb--data~.

#+begin_src elisp
(defun tvdb-remove (id)
  "Remove series with ID from tvdb--data."

  (setq tvdb--data
        (--remove (= id (alist-get 'id it)) tvdb--data)))
#+end_src

For example, remove Game of Thrones.

#+begin_src elisp
(tvdb-remove 121361)
#+end_src

*** get list of followed series

Get the list of series in ~tvdb--data~ without episodes.

#+begin_src elisp
(defun tvdb-get-series ()
  "Get followed series."

  (tvdb--utils-array-select '(id seriesName) tvdb--data))
#+end_src

#+begin_src elisp
(tvdb-get-series)
#+end_src

*** get all episodes of a followed series

Get all episodes of a series in ~tvdb--data~.

#+begin_src elisp
(defun tvdb-get-episodes (id)
  "Get episodes of series with ID."

  (alist-get 'episodes
             (--find (= id (alist-get 'id it)) tvdb--data)))
#+end_src

For example, get all Utopia episodes.

#+begin_src elisp
(tvdb-get-episodes 264991)
#+end_src

*** watch an episode from a series

Set an episode as watched.

#+begin_src elisp
(defun tvdb-watch (seriesId episodeId)
  "Watch episode EPISODEID in series SERIESID."

  (->> tvdb--data
       (-map-when (lambda (series) (= seriesId (alist-get 'id series)))
                  (lambda (series)
                    (setf (alist-get 'episodes series)
                          (-map-when (lambda (episode) (= episodeId (alist-get 'id episode)))
                                     (lambda (episode)
                                       (setf (alist-get 'watched episode) t)
                                       episode)
                                     (alist-get 'episodes series)))))))
#+end_src

For example, watch Rick and Morty S04E09:

#+begin_src elisp
(tvdb-watch 275274 7687399)
#+end_src

*** watch all episodes in a series

Set all episodes in a series as watched.

#+begin_src elisp
(defun tvdb-watch-all (seriesId)
"Watch all episodes in SERIESID."

(->> tvdb--data
     (-map-when (lambda (series) (= seriesId (alist-get 'id series)))
                (lambda (series)
                  (setf (alist-get 'episodes series)
                        (-map (lambda (episode)
                                (setf (alist-get 'watched episode) t)
                                episode)
                              (alist-get 'episodes series)))))))
#+end_src

For example, watch the whole of Utopia:

#+begin_src elisp
(tvdb-watch-all 264991)
#+end_src

*** watch all up to a specific episode in a series

Set all episodes up to a specific episode in a series (including it) as watched.

#+begin_src elisp
(defun tvdb-watch-up (seriesId episodeId)
  "Watch all episodes up to EPISODEID in SERIESID."

  (let ((upto (->> tvdb--data
                   (--filter (= seriesId (alist-get 'id it)))
                   (-flatten-n 1)
                   (alist-get 'episodes)
                   (--filter (= episodeId (alist-get 'id it)))
                   (-flatten-n 1)
                   (alist-get 'absoluteNumber))))
    (->> tvdb--data
         (-map-when (lambda (series) (= seriesId (alist-get 'id series)))
                    (lambda (series)
                      (setf (alist-get 'episodes series)
                            (-map-when (lambda (episode)
                                         (<= (alist-get 'absoluteNumber episode)
                                             upto))
                                       (lambda (episode)
                                         (setf (alist-get 'watched episode) t)
                                         episode)
                                       (alist-get 'episodes series))))))))
#+end_src

For example, watch all Rick and Morty episodes up to S03E06:

#+begin_src elisp
(tvdb-watch-up 275274 6231155)
#+end_src

*** get list of upcoming episodes

Get list of all unwatched episodes, including episodes that have not aired yet.

#+begin_src elisp
(defun tvdb-upcoming ()
  "List upcoming episodes."

  (->> tvdb--data
      (-map (lambda (series)
              (let ((outseries (-clone series)))
                (setf (alist-get 'episodes outseries)
                      (--filter (equal nil (alist-get 'watched it))
                               (alist-get 'episodes outseries)))
                outseries)))
      (--remove (equal nil (alist-get 'episodes it)))))
#+end_src

For example:

#+begin_src elisp
(tvdb-upcoming)
#+end_src

*** get list of episodes to watch

Get list of all unwatched episodes that have already aired.

#+begin_src elisp
(defun tvdb-to-watch ()
  "List of episodes to watch."

  (->> (tvdb-upcoming)
      (-map (lambda (series)
              (let ((outseries (-clone series)))
                (setf (alist-get 'episodes outseries)
                      (--remove (> (tvdb--utils-date-to-epoch (alist-get 'firstAired it)) (tvdb--utils-current-epoch))
                               (alist-get 'episodes outseries)))
                outseries)))))
#+end_src

For example:

#+begin_src elisp
(tvdb-to-watch)
#+end_src

*** query updates for new episodes

Update a single series.
Retrieve all new episodes and add them to the series. Update all series properties.

#+begin_src elisp
(defun tvdb--update-series (id)
  "Query new episodes for series ID, and add them to the list.
Update the other series properties."

  (let* ((series (--find (= id (alist-get 'id it)) tvdb--data))
         (lastPage (alist-get 'lastPage series))
         (oldEpisodes (alist-get 'episodes series))
         (allEpisodes (tvdb--series/episodes tvdb--token id lastPage))
         (newEpisodesId (-difference (tvdb--utils-array-pull 'id allEpisodes) (tvdb--utils-array-pull 'id oldEpisodes)))
         (newEpisodes (--filter (-contains? newEpisodesId (alist-get 'id it)) allEpisodes))
         (newSeries (--> (tvdb--series tvdb--token id)
                         (-snoc it `(lastPage . ,(tvdb--series/episodesLastPage tvdb--token id)))
                         (-snoc it `(episodes ,@(append oldEpisodes newEpisodes))))))
    (setq tvdb--data
          (--> tvdb--data
               (--remove (= id (alist-get 'id it)) it)
               (-snoc it newSeries)))))
#+end_src

Get all series updated since the last known date (series lastUpdated date).
Query all followed series that are updated and add all new episodes.

#+begin_src elisp
(defun tvdb-update ()
  "Query all updated series since the last known update.
Keep only series that are followed.
Update new episodes."

  (-some->> tvdb--data
    (tvdb--utils-array-pull 'lastUpdated)
    -max
    (tvdb--update tvdb--token)
    (tvdb--utils-array-pull 'id)
    (-intersection (tvdb--utils-array-pull 'id (tvdb-get-series)))
    (-map 'tvdb--update-series)))
#+end_src

* Interface

* Postamble

#+begin_src elisp
(provide 'seriesTracker)

;;; seriesTracker.el ends here
#+end_src
